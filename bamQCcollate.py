#!/usr/bin/env python

import argparse
import sys
from Bio import SeqIO
import os
import getopt
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

#######################################################################
##This script collates major summary statistics from the genome_results  
##file generated by bamqc (Qualimap).
#######################################################################


class FullPaths(argparse.Action):
    """Expand user- and relative-paths"""
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest,
            os.path.abspath(os.path.expanduser(values)))

def is_file(filename):
    """Checks if a file exists"""
    if not os.path.isfile(filename):
        msg = "{0} is not a file".format(filename)
        raise argparse.ArgumentTypeError(msg)
    else:
        return filename

def get_arguments(): 
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(
        description="Collate summary info from multiple bamqc runs")
    parser.add_argument('-i', '--inputFile',
        help = 'file containing paths to bamqc results that are to be collated', 
        type = is_file,
        required = True)
    parser.add_argument('-o', '--outputFile',
        help = 'name of output file,',
        required = True)
    return parser.parse_args()

def make_inputList():
    inputList = []
    with open(args.inputFile, 'r') as infile:
        for line in infile:
            line = line.strip()
            inputList.append(line)
    return inputList

def make_dict(inputList):
    d = {}
    """for every file in input, extract parameters from the genome_results.txt file"""
    for f in inputList:
        with open(f, 'r') as infile:
            for i, line in enumerate(infile):
                line = line.strip()
                if i == 5:
                    sample = line.split("=")[1].split("/")[-1].split(".")[0].strip()
                    print sample
                    d[sample] = {}
                elif i == 20:
                    perMapped = line.split()[-1].strip("(%)")
                    d[sample]["perMapped"] = perMapped
                elif i == 26:
                    dupRate = line.split()[-1].strip("%")
                    d[sample]["dupRate"] = dupRate 
                elif i == 31:
                    meanIns = line.split()[-1]
                    d[sample]["meanIns"] = meanIns
                elif i == 32:
                    stdIns = line.split()[-1]
                    d[sample]["stdIns"] = stdIns
                elif i == 33:
                    medIns = line.split()[-1]
                    d[sample]["medIns"] = medIns
                elif i == 38:
                    meanMQ = line.split()[-1]
                    d[sample]["meanMQ"] = meanMQ
                elif i == 43:
                    A = line.split()[-1].strip("(%)")
                    d[sample]["A"] = A
                elif i == 44:
                    C = line.split()[-1].strip("(%)")
                    d[sample]["C"] = C
                elif i == 45:
                    T = line.split()[-1].strip("(%)")
                    d[sample]["T"] = T
                elif i == 46:
                    G = line.split()[-1].strip("(%)")
                    d[sample]["G"] = G
                elif i == 47:
                    N = line.split()[-1].strip("(%)")
                    d[sample]["N"] = N
                elif i == 49:
                    GCper = line.split()[-1].strip("%")
                    d[sample]["GCper"] = GCper
                elif i == 54:
                    errRate = line.split()[-1]
                    d[sample]["errRate"] = errRate
                elif i == 55:
                    misMat = line.split()[-1]
                    d[sample]["misMat"] = misMat
                elif i == 56:
                    numIns = line.split()[-1]
                    d[sample]["numIns"] = numIns
                elif i == 57:
                    insPer = line.split()[-1].strip("%")
                    d[sample]["insPer"] = insPer
                elif i == 58:
                    numDel = line.split()[-1]
                    d[sample]["numDel"] = numDel
                elif i == 59:
                    delPer = line.split()[-1].strip("%")
                    d[sample]["delPer"] = delPer
                elif i == 60:
                    homInd = line.split()[-1].strip("%")
                    d[sample]["homInd"] = homInd
                elif i == 65:
                    meanCov = line.split()[-1].strip("X")
                    d[sample]["meanCov"] = meanCov
                elif i == 66:
                    stdCov = line.split()[-1].strip("X")
                    d[sample]["stdCov"] = stdCov
                elif i == 77:
                    perGen10X = line.split()[3].strip("%")
                    d[sample]["perGen10X"] = perGen10X
                elif i == 82:
                    perGen15X = line.split()[3].strip("%")
                    d[sample]["perGen15X"] = perGen15X
                elif i == 87:
                    perGen20X = line.split()[3].strip("%")
                    d[sample]["perGen20X"] = perGen20X
                elif i == 97:
                    perGen30X = line.split()[3].strip("%")
                    d[sample]["perGen30X"] = perGen30X
    return d

def write_file(d):
    with open(args.outputFile, 'w') as outfile:
        outfile.write('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n' %
            ("Sample", "meanCov", "stdCov", "meanMQ", "perMapped", 
            "perGen10X", "perGen15X", "perGen20X", "perGen30X", "dupRate",
            "errRate", "misMat", "numIns", "insPer", "numDel", "delPer", 
            "homInd", "meanIns", "medIns", "stdIns", "GCper", "A", "C", "G",
            "T", "N"))
        for key in d:
            outfile.write('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n' %
                (key, d[key]["meanCov"], d[key]["stdCov"], d[key]["meanMQ"],
                d[key]["perMapped"], d[key]["perGen10X"], 
                d[key]["perGen15X"], d[key]["perGen20X"], 
                d[key]["perGen30X"], d[key]["dupRate"], d[key]["errRate"],
                d[key]["misMat"], d[key]["numIns"], d[key]["insPer"],
                d[key]["numDel"], d[key]["delPer"], d[key]["homInd"],
                d[key]["meanIns"], d[key]["medIns"], d[key]["stdIns"], 
                d[key]["GCper"], d[key]["A"], d[key]["C"], d[key]["G"], 
                d[key]["T"], d[key]["N"]))

args = get_arguments()
inputList = make_inputList()
d = make_dict(inputList)
write_file(d)
